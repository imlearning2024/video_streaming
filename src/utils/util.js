import { spawn } from "child_process";
import chalk from "chalk";
export const process_hls = (inputPath, outPutPath) => {
    return new Promise((resolve, reject) => {
        // const args = [
        //     "-i",
        //     inputPath,
        //     "-c:v",
        //     "h264",
        //     "-profile:v",
        //     "main",
        //     "-level",
        //     "4.0",
        //     "-c:a",
        //     "aac",
        //     "-strict",
        //     "-2",
        //     "-start_number",
        //     "0",
        //     "-hls_time",
        //     "4",
        //     "-hls_list_size",
        //     "0",
        //     "-f",
        //     "hls",
        //     `${outPutPath}/playlist.m3u8`,
        // ];
        console.log(
            chalk.green(`inputPath:${inputPath} \n outPutPath:${outPutPath}`),
        );

        // const args = [
        //     "-y",
        //     "-i",
        //     inputPath,
        //     "-filter_complex",
        //     "[0:v]split=5[v1][v2][v3][v4][v5]; [v1]scale=w=256:h=144[v1out]; [v2]scale=w=426:h=240[v2out]; [v3]scale=w=854:h=480[v3out]; [v4]scale=w=1280:h=720[v4out]; [v5]scale=w=3840:h=2160[v5out]",
        //     "-map",
        //     "[v1out]",
        //     "-map",
        //     "a:0",
        //     "-c:v:0",
        //     "libx264",
        //     "-b:v:0",
        //     "400k",
        //     "-c:a:0",
        //     "aac",
        //     "-b:a:0",
        //     "128k",
        //     "-preset",
        //     "slow",
        //     "-g",
        //     "150",
        //     "-keyint_min",
        //     "150",
        //     "-map",
        //     "[v2out]",
        //     "-map",
        //     "a:0",
        //     "-c:v:1",
        //     "libx264",
        //     "-b:v:1",
        //     "800k",
        //     "-c:a:1",
        //     "aac",
        //     "-b:a:1",
        //     "128k",
        //     "-preset",
        //     "slow",
        //     "-g",
        //     "150",
        //     "-keyint_min",
        //     "150",
        //     "-map",
        //     "[v3out]",
        //     "-map",
        //     "a:0",
        //     "-c:v:2",
        //     "libx264",
        //     "-b:v:2",
        //     "1500k",
        //     "-c:a:2",
        //     "aac",
        //     "-b:a:2",
        //     "128k",
        //     "-preset",
        //     "slow",
        //     "-g",
        //     "150",
        //     "-keyint_min",
        //     "150",
        //     "-map",
        //     "[v4out]",
        //     "-map",
        //     "a:0",
        //     "-c:v:3",
        //     "libx264",
        //     "-b:v:3",
        //     "3000k",
        //     "-c:a:3",
        //     "aac",
        //     "-b:a:3",
        //     "128k",
        //     "-preset",
        //     "slow",
        //     "-g",
        //     "150",
        //     "-keyint_min",
        //     "150",
        //     "-map",
        //     "[v5out]",
        //     "-map",
        //     "a:0",
        //     "-c:v:4",
        //     "libx264",
        //     "-b:v:4",
        //     "8000k",
        //     "-c:a:4",
        //     "aac",
        //     "-b:a:4",
        //     "128k",
        //     "-preset",
        //     "slow",
        //     "-g",
        //     "150",
        //     "-keyint_min",
        //     "150",
        //     "-var_stream_map",
        //     "v:0,a:0 v:1,a:1 v:2,a:2 v:3,a:3 v:4,a:4",
        //     "-f",
        //     "hls",
        //     "-hls_list_size",
        //     "0",
        //     "-hls_time",
        //     "6",
        //     "-hls_playlist_type",
        //     "vod",
        //     "-hls_segment_filename",
        //     `${outPutPath}/video_%v/segment_%d.ts`,
        //     "-master_pl_name",
        //     `playlist.m3u8`,
        //     `${outPutPath}/video_%v/playlist.m3u8`,
        // ];
        //
        const args = [
            "-y",
            "-i",
            inputPath,
            "-filter_complex",
            "[0:v]split=5[v1][v2][v3][v4][v5]; [v1]scale=w=-2:h=144[v1out]; [v2]scale=w=-2:h=240[v2out]; [v3]scale=w=-2:h=480[v3out]; [v4]scale=w=-2:h=720[v4out]; [v5]scale=w=-2:h=2160[v5out]",
            "-map",
            "[v1out]",
            "-map",
            "a:0",
            "-c:v:0",
            "libx264",
            "-b:v:0",
            "400k",
            "-c:a:0",
            "aac",
            "-b:a:0",
            "128k",
            "-preset",
            "slow",
            "-g",
            "150",
            "-keyint_min",
            "150",
            "-map",
            "[v2out]",
            "-map",
            "a:0",
            "-c:v:1",
            "libx264",
            "-b:v:1",
            "800k",
            "-c:a:1",
            "aac",
            "-b:a:1",
            "128k",
            "-preset",
            "slow",
            "-g",
            "150",
            "-keyint_min",
            "150",
            "-map",
            "[v3out]",
            "-map",
            "a:0",
            "-c:v:2",
            "libx264",
            "-b:v:2",
            "1500k",
            "-c:a:2",
            "aac",
            "-b:a:2",
            "128k",
            "-preset",
            "slow",
            "-g",
            "150",
            "-keyint_min",
            "150",
            "-map",
            "[v4out]",
            "-map",
            "a:0",
            "-c:v:3",
            "libx264",
            "-b:v:3",
            "3000k",
            "-c:a:3",
            "aac",
            "-b:a:3",
            "128k",
            "-preset",
            "slow",
            "-g",
            "150",
            "-keyint_min",
            "150",
            "-map",
            "[v5out]",
            "-map",
            "a:0",
            "-c:v:4",
            "libx264",
            "-b:v:4",
            "8000k",
            "-c:a:4",
            "aac",
            "-b:a:4",
            "128k",
            "-preset",
            "slow",
            "-g",
            "150",
            "-keyint_min",
            "150",
            "-var_stream_map",
            "v:0,a:0 v:1,a:1 v:2,a:2 v:3,a:3 v:4,a:4",
            "-f",
            "hls",
            "-hls_list_size",
            "0",
            "-hls_time",
            "6",
            "-hls_playlist_type",
            "vod",
            "-hls_segment_filename",
            `${outPutPath}/video_%v/segment_%d.ts`,
            "-master_pl_name",
            `playlist.m3u8`,
            `${outPutPath}/video_%v/playlist.m3u8`,
        ];

        const cmd = "ffmpeg";
        let stderr = "";
        let stdout = "";
        let complition_code = new Number();
        const ffmpeg = spawn(cmd, args);

        ffmpeg.stdout.on("data", (data) => {
            stdout = data.toString();
            console.log(`stdout: ${data}`);
        });

        ffmpeg.stderr.on("data", (data) => {
            stderr = data.toString();
            console.error(`stderr: ${data}`);
        });

        ffmpeg.on("close", (code) => {
            complition_code = Number(code);
            console.log(chalk.red(`child process exited with code ${code}`));

            if (code === 0) {
                resolve({ stderr, stdout, complition_code });
            } else {
                console.error(chalk.red(`FFmpeg error output: ${stderr}`));
                reject(new Error("hls_process failed , promise rejecetd"));
            }
        });
    });
};
